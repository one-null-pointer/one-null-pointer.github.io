<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>web源码扩展</title>
    <link href="/2022/07/04/web%E6%BA%90%E7%A0%81%E6%89%A9%E5%B1%95/"/>
    <url>/2022/07/04/web%E6%BA%90%E7%A0%81%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB源码"><a href="#WEB源码" class="headerlink" title="WEB源码"></a>WEB源码</h1><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>Web源码在安全测试中是非常重要的信息来源，可以用来代码审计漏洞也可以用来做信息突破口，其中Web源码有很多技术需要简明分析。比如：获取某ASP源码后可以采用默认数据库下载为突破，获取某其他脚本源码漏洞可以进行代码审计挖掘或分析其业务逻辑等，总之源码的获取将为后期的安全测试提供了更多的思路。</p><p><img src="/img/web%E6%BA%90%E7%A0%81%E6%89%A9%E5%B1%95/3-1.png"></p><h3 id="二、web源码目录结构"><a href="#二、web源码目录结构" class="headerlink" title="二、web源码目录结构"></a>二、web源码目录结构</h3><ul><li><p>据库配置文件</p></li><li><p>后台目录</p></li><li><p>模板目录</p></li><li><p>数据库目录</p></li><li><p>index.php 根据文件后缀判定</p></li><li><p>admin 网站后台路径</p></li><li><p>data 数据相关目录</p></li><li><p>install 安装目录</p></li><li><p>member 会员目录</p></li><li><p>template 模板目录(和网站相关的整体架构)</p></li><li><p>data =&gt; confing.php 数据库配置文件，网站和数据库的通讯信息，连接账号密码，可以去连接对方数据库，从数据库去得到这个网站的源码里面涉及到的管理员的账号密码。</p></li></ul><h3 id="三、web源码脚本类型"><a href="#三、web源码脚本类型" class="headerlink" title="三、web源码脚本类型"></a>三、web源码脚本类型</h3><ul><li>ASP</li><li>PHP</li><li>ASPX</li><li>JSP</li><li>JAVAWEB</li><li>其他</li></ul><h3 id="四、web源码应用分类"><a href="#四、web源码应用分类" class="headerlink" title="四、web源码应用分类"></a>四、web源码应用分类</h3><p>对于社交、论坛、门户、第三份以及博客等Web的应用而言，不同的应用意味着不同的代码机制对应漏洞。在审计Web源码模板时，应该需要注意开源未开源、框架非框架以及关于CMS识别问题及后续等。</p><p>网站类侧重漏洞：</p><ul><li>门户网站———————-综合类漏洞</li><li>电商—————————业务逻辑漏洞</li><li>论坛—————————XSS漏洞</li><li>博客—————————漏洞较少</li><li>第三方————————根据博客功能决定</li></ul><h3 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h3><p>1）框架与非框架</p><p>当被攻击方采用的是框架类型的Web源码时，我们就可以直接寻找整体框架的漏洞，如果是非框架的Web源码，则寻到的漏洞是针对代码写出来的漏洞（即代码审计）</p><p>  比如：thinkPHP漏洞</p><p>2）CMS（内容管理系统）</p><ul><li><p>CMS：</p><p>内容管理系统是企业信息化建设和电子政务的新宠，也是一个相对较新的市场</p></li><li><p>CMS识别：</p><p>判定一个网站是用什么程序搭建的</p></li><li><p>CMS组成要素</p><p>–文档模板</p><p>–脚本语言或标记语言</p><p>–与数据库集成</p></li><li><p>CMS识别</p><p>–<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></p><p>–<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p></li></ul><p>3）源码的获取途径</p><ul><li>扫描工具探测备份文件</li><li>CMS识别技术获取CMS名称然后从网上下载</li><li>百度直接搜索：源码</li><li>咸鱼上会有卖</li><li>第三方源码站：比如菜鸟源码</li><li>各种行业对应</li></ul>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>抓包攻击演示</title>
    <link href="/2022/07/02/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/"/>
    <url>/2022/07/02/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="抓包攻击演示（Burp）"><a href="#抓包攻击演示（Burp）" class="headerlink" title="抓包攻击演示（Burp）"></a>抓包攻击演示（Burp）</h1><h2 id="1-进入投票系统，每个ip只能点击一次"><a href="#1-进入投票系统，每个ip只能点击一次" class="headerlink" title="1.进入投票系统，每个ip只能点击一次"></a>1.进入投票系统，每个ip只能点击一次</h2><p><img src="/img/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/3-1.png"></p><h2 id="2-使用burp进行抓包，增加X-FORWARDED-FOR"><a href="#2-使用burp进行抓包，增加X-FORWARDED-FOR" class="headerlink" title="2.使用burp进行抓包，增加X_FORWARDED_FOR"></a>2.使用burp进行抓包，增加X_FORWARDED_FOR</h2><p><img src="/img/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/3-2.png"></p><h2 id="3-发送到intruder，设置变量"><a href="#3-发送到intruder，设置变量" class="headerlink" title="3.发送到intruder，设置变量"></a>3.发送到intruder，设置变量</h2><p><img src="/img/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/3-3.png"></p><h2 id="4-设置数值"><a href="#4-设置数值" class="headerlink" title="4.设置数值"></a>4.设置数值</h2><p><img src="/img/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/3-4.png"></p><h2 id="5-开始攻击"><a href="#5-开始攻击" class="headerlink" title="5.开始攻击"></a>5.开始攻击</h2><p><img src="/img/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/3-5.png"></p><h2 id="6-完成任务"><a href="#6-完成任务" class="headerlink" title="6.完成任务"></a>6.完成任务</h2><p><img src="/img/%E6%8A%93%E5%8C%85%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA/3-6.png"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>http和https</title>
    <link href="/2022/07/02/http%E5%92%8Chttps/"/>
    <url>/2022/07/02/http%E5%92%8Chttps/</url>
    
    <content type="html"><![CDATA[<h2 id="1-HTTP-S数据包种类"><a href="#1-HTTP-S数据包种类" class="headerlink" title="1.HTTP/S数据包种类"></a>1.HTTP/S数据包种类</h2><ul><li>1）Request 请求数据包</li><li>2）Proxy 代理服务器</li><li>3）Response 返回数据包</li></ul><h2 id="2-协议结构"><a href="#2-协议结构" class="headerlink" title="2.协议结构"></a>2.协议结构</h2><p><img src="/img/http%E5%92%8Chttps/2-1.png"></p><ul><li>–HTTPS协议需要得到CA申请证书。</li><li>–HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议。</li><li>–HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，HTTP使用80端口，HTTPS使用443。</li><li>–HTTP的连接比较简单，是无状态的；HTTPS协议是由SSL+HTTP协议与构成的，可进行加密传输，身份认证的网络协议，比HTTP协议更加安全。</li></ul><h2 id="3-通信过程"><a href="#3-通信过程" class="headerlink" title="3.通信过程"></a>3.通信过程</h2><ul><li><p>1）HTTP通信过程</p><p>建立连接——&gt;发送请求数据包——&gt;返回响应数据包——&gt;关闭连接</p><p>–浏览器建立与web服务器直接的连接。</p><p>–浏览器将请求数据打包（生成请求数据包）并发送到web服务器。</p><p>–web服务器将处理结果打包（生成响应数据包）并发送到浏览器。</p><p>–web服务器关闭连接。</p></li><li><p>2）HTTPS通信过程</p></li></ul><p><img src="/img/http%E5%92%8Chttps/2-2.png"></p><h2 id="4-Request请求数据包数据格式"><a href="#4-Request请求数据包数据格式" class="headerlink" title="4.Request请求数据包数据格式"></a>4.Request请求数据包数据格式</h2><ul><li><p>1）请求行</p><p>–包括请求类型/请求资源路径、协议的版本和类型，一般而言，请求行由三个标记组成：请求方法、请求URL和HTTP版本，它们用空格分隔。</p><p>–例如： GET /index.html HTTP/1.1</p><p>HTTP规划定义了8中可能的请求方法：</p><p>① GET：检索URL中标识资源的一个简单请求。</p><p>② HEAD：与GET方法相同，服务器只返回状态行和头标，并不返回请求文档。</p><p>③ POST：服务器接收被写入客户端输出流中数据的请求。</p><p>④ PUT：服务器保存请求数据作为指定URL新内容的请求</p><p>⑤ DELETE：服务器删除URL中命令的资源的请求</p><p>⑥ OPTIONS：关于服务器支持的请求方法信息的请求</p><p>⑦ TRACE：web服务器反馈HTTP请求和其头标的请求</p><p>⑧ CONNECT：已文档化，但当前未实现的一个方法，预留做隧道处理</p></li><li><p>2）请求头</p><p>–一些键值对，浏览器与web服务器之间都可以发送，包含了特殊的某种含义。</p><p>① HOST：主机或域名地址。</p><p>② Accept：指浏览器或其他客户可以接受的MIME文件格式，servlet可以根据它判断并返回适当的文件格式。</p><p>③ User-Agent：是客户浏览器名称。</p><p>④ Host：对应网址URL中的web名称和端口号。</p><p>⑤ Accept-Language：指出浏览器可以接受的语言种类，如en或者en-us，指英语。</p><p>⑥ connection：用来告诉服务器是否可以维持固定的HTTP连接、http是无连接的，HTTP/1.1使用Keep-Alive为默认值，这样当浏览器需要多个文件时（比如一个HTML文件和相关的图形文件），不需要每次都建立连接。</p><p>⑦ Cookie：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，他可以记载服务器相关的用户信息，也可以用来实现会话功能</p><p>⑧ Referer：表明产生请求的网页URL，这个属性可以用来跟踪web请求是从什么网站来的。</p><p>⑨ Content-Type ：用来表明request的内容类型，可以用HttpServeletRequest的getContentType()方法取得。</p><p>⑩ Accept-Charset：指出浏览器可以接受的字符编码。``</p><p><strong>⑪</strong> Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件传递速度。浏览器在接收到web响应之后再解码，然后再检查文件格式。</p></li><li><p>3）空行</p><p>–请求头与请求体之间用一个空行分开；最后一个请求头标之后是空行，发送回车符合退行，通知服务器以下不再有头标。</p></li><li><p>4）请求体</p><p>–要发送的数据，一般使用POST传送，POST最常使用的是Content-Type和Content-Length头标</p></li><li><p>5）请求数据包案例</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">GET / HTTP/1.1<br>Host: www.baidu.com<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Cookie: BAIDUID=DF85C12211175FD67D599BC8A06EB4B2:FG=1; BIDUPSID=DF85C12211175FD6D8AC7AF7356EF11F; PSTM=1571798152; BD_UPN=13314752; COOKIE_SESSION=251208_1_7_5_8_6_0_0_5_5_0_0_251207_0_1_0_1580795676_1580539587_1580795675%7C9%235096250_55_1580539585%7C9; BDRCVFR[Fc9oatPmwxn]=mk3SLVN4HKm; delPer=0; BD_CK_SAM=1; PSINO=1; H_PS_PSSID=1465_21124_26350_30496; H_PS_645EC=d0f32cF5kQJ3ZcmKhkebQhVlmvrVbJe34vcNJntPlQBU7X%2BEF0T1MJCfpt5UZln7q4OU; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; BD_HOME=0<br>Upgrade-Insecure-Requests: 1<br>Cache-Control: max-age=0<br></code></pre></td></tr></table></figure><h2 id="5-Response返回数据包格式"><a href="#5-Response返回数据包格式" class="headerlink" title="5.Response返回数据包格式"></a>5.Response返回数据包格式</h2><ul><li><p>1）状态行</p><p>–协议版本，数字形式的状态代码和状态描述，各元素之间用空格进行分割<br>HTTP响应码。</p><p>–部分HTTP响应码：</p><p>1XX：信息，请求收到，继续处理<br>2XX：成功，行为被成功的接收、理解和采纳<br>3XX：重定向，为了完成请求，必须进一步执行的动作<br>4XX：客户端错误<br>5XX：服务器错误<br>200：存在文件<br>403：存在文件夹<br>3XX：均可能存在<br>404：不存在文件及文件夹<br>500：均可能存在</p></li><li><p>2）响应头标</p><p>–包含服务器类型、日期、长度、内容类型等；像请求头标一样，它们指出服务器的功能，标识出响应数据的细节。</p></li><li><p>3）空行</p><p>–响应头与响应体之间用空行隔开；最后一个响应头标之后是一个空行，发送回车符和退行，表面服务器一下不再有头标。</p></li><li><p>4）响应数据</p><p>–浏览器会将实体内容中额数据取出来，生成相应的页面HTML文档和图像等，也就是HTML本身。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>web一些基本概念</title>
    <link href="/2022/07/01/web%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2022/07/01/web%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="一、域名"><a href="#一、域名" class="headerlink" title="一、域名"></a>一、域名</h1><h3 id="1-域名"><a href="#1-域名" class="headerlink" title="1.域名"></a><strong>1.域名</strong></h3><ul><li><p>​        域名（Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识。</p><p>​       由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过<strong>网域名称系统</strong>（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p></li></ul><h3 id="2-二级域名和多级域名"><a href="#2-二级域名和多级域名" class="headerlink" title="2.二级域名和多级域名"></a><strong>2.二级域名和多级域名</strong></h3><ul><li>​        一级域名相比较于二级域名基本更高，二级域名一般都是依附于一级域名之下，即二级域名是一级域名的细分层级。举个例子：如A.com是一级域名，A.B.com则是二级域名。</li></ul><h3 id="3-域名对于渗透的作用"><a href="#3-域名对于渗透的作用" class="headerlink" title="3.域名对于渗透的作用"></a><strong>3.域名对于渗透的作用</strong></h3><ul><li>​       当我们在对网页进行渗透的时候，在主域名找不到漏洞时，可以尝试其下层级的子域名，可以通过在子域名的漏洞从而延伸到主域名中。</li></ul><h3 id="4-域名注册"><a href="#4-域名注册" class="headerlink" title="4.域名注册"></a><strong>4.域名注册</strong></h3><ul><li>​       域名现有的注册机构比较多，其中比较著名的机构是万网，万网已经被阿里云收购。</li></ul><h1 id="二、域名系统"><a href="#二、域名系统" class="headerlink" title="二、域名系统"></a>二、域名系统</h1><h2 id="1-域名系统"><a href="#1-域名系统" class="headerlink" title="1.域名系统"></a><strong>1.域名系统</strong></h2><ul><li><p>​       DNS是计算机域名系统（Domain Name System 或 Domain Name Service）的缩写，它是由解析器和域名服务器组成的，作用是把域名转换成为网络可以识别的ip地址。</p><p>​        域名服务器是指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器。其中域名必须对应一个IP地址，而IP地址不一定有域名。DNS就是进行域名解析的服务器。</p></li></ul><h3 id="2-HOSTS与DNS的关系"><a href="#2-HOSTS与DNS的关系" class="headerlink" title="2.HOSTS与DNS的关系"></a><strong>2.HOSTS与DNS的关系</strong></h3><ul><li><p>​       HOSTS是一个没有扩展名的系统文件，其作用是将一些常用的域名与其对应的IP地址建立一个关联的“数据库”存入电脑中，当用户在浏览器中输入一个需要登录的网址时，系统会首先在HOSTS文件中找到对应IP地址，如果没有找到，则系统会将网址提交DNS域名解析服务器进行IP地址的解析。</p><p>​        访问一个网站时，系统首先在DNS缓存读取该域名所对应的IP地址，当查找不到时就会到系统中查找hosts文件，如果还没有那么才会向DNS服务器请求一个DNS查询。</p></li></ul><h3 id="3-CDN与DNS的关系"><a href="#3-CDN与DNS的关系" class="headerlink" title="3.CDN与DNS的关系"></a><strong>3.CDN与DNS的关系</strong></h3><ul><li><p>​        CDN的全称是内容分发网络，其作用是让用户能够更加快速的得到请求的数据。它能人用户就近访问数据，从而达到快速获取的目的。</p><p>​        举个例子：现在服务器在北京，深圳的用户想要获取服务器上的数据就需要跨越一个很远的距离，这显然就比北京的用户访问北京的服务器速度要慢。但是现在我们在深圳建立一个cdn服务器，上面缓存住一些数据，深圳用户访问时先访问这个cdn服务器，如果服务器上有用户请求的数据就可以直接返回，这样速度就大大的提升了。</p></li></ul><h3 id="4-常见的DNS安全攻击"><a href="#4-常见的DNS安全攻击" class="headerlink" title="4.常见的DNS安全攻击"></a><strong>4.常见的DNS安全攻击</strong></h3><ul><li><h5 id="缓存投毒（DNS污染）"><a href="#缓存投毒（DNS污染）" class="headerlink" title="缓存投毒（DNS污染）"></a>缓存投毒（DNS污染）</h5><p>​        通常也称为域名系统投毒或DNS缓存投毒。它是利用虚假Internet地址替换掉域名系统表中的地址，进而制造破坏。当网络用户在带有该虚假地址的页面中进行搜寻，以访问某链接时，网页浏览器由于受到该虚假条目的影响而打开了不同的网页链接。在这种情况下，蠕虫、木马、浏览器劫持等恶意软件就可能会被下载到本地用户的电脑上。</p><p>​        用通俗的话描述，就是更改了缓存中某域名的地址，将其改为了自己的虚假地址，当被攻击者点开时，会转到攻击者指定的网站，从而达到攻击的目的。</p></li><li><h5 id="2）DNS劫持"><a href="#2）DNS劫持" class="headerlink" title="2）DNS劫持"></a>2）DNS劫持</h5><p>​       DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应。</p><p>​        其效果就是对特定的网络不能访问或访问的是假网址。这类攻击一般通过恶意软件来更改终端用户TCP/IP设置，将用户指向恶意DNS服务器，该DNS服务器会对域名进行解析，并最终指向钓鱼网站等被攻击者操控的服务器。</p></li><li><h5 id="3）域名劫持"><a href="#3）域名劫持" class="headerlink" title="3）域名劫持"></a>3）域名劫持</h5><p>​        所谓的域名劫持就是在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则直接返回假的IP地址或者什么也不做使得请求失去响应。</p><p>​        其效果就是对特定的网址不能访问或访问的是假网址。一旦您的域名被劫持，用户被引到假冒的网站进而无法正常浏览网页，用户可能被诱骗到冒牌网站进行登录等操作导致泄露隐私数据。</p></li></ul><ul><li><h5 id="4）DNS-DDOS攻击"><a href="#4）DNS-DDOS攻击" class="headerlink" title="4）DNS DDOS攻击"></a>4）DNS DDOS攻击</h5><p>​        针对DNS的DDoS攻击通过控制大批僵尸网络利用真实DNS协议栈发起大量域名查询请求，利用工具软件伪造源IP发送海量DNS查询，发送海量DNS查询报文导致网络带宽耗尽而无法传送正常DNS查询请求。发送大量非法域名查询报文引起DNS服务器持续进行迭代查询，从而达到较少的攻击流量消耗大量服务器资源的目的。</p></li><li><h5 id="5）反射式DNS放大攻击"><a href="#5）反射式DNS放大攻击" class="headerlink" title="5）反射式DNS放大攻击"></a>5）反射式DNS放大攻击</h5><p>​        DNS 反射放大攻击主要是利用 DNS 回复包比请求包大的特点，放大流量，伪造请求包的源 IP 地址为受害者 IP，将应答包的流量引入受害的服务器。</p></li></ul><h1 id="三、脚本语言"><a href="#三、脚本语言" class="headerlink" title="三、脚本语言"></a>三、脚本语言</h1><h2 id="1-语言脚本类型"><a href="#1-语言脚本类型" class="headerlink" title="1.语言脚本类型"></a><strong>1.语言脚本类型</strong></h2><ul><li>​        脚本语言又被称为扩建的语言，或者动态语言，是一种编程语言，用来控制软件应用程序，脚本通常都是以文本形式保存，只在被调用时进行解释或编译。例如：Scala、JavaScript，VBScript，ActionScript，MAXScript，ASP，JSP，PHP，SQL，Perl，Shell，python，Ruby，JavaFX，Lua，AutoIt等。</li></ul><h2 id="2-不同脚本类型与安全漏洞的关系"><a href="#2-不同脚本类型与安全漏洞的关系" class="headerlink" title="2.不同脚本类型与安全漏洞的关系"></a><strong>2.不同脚本类型与安全漏洞的关系</strong></h2><ul><li>​        不同的脚本语言的编写规则不一样，程序产生的漏洞自然也不一样（代码审计）。</li></ul><h1 id="四、后门"><a href="#四、后门" class="headerlink" title="四、后门"></a>四、后门</h1><h2 id="1-后门"><a href="#1-后门" class="headerlink" title="1.后门"></a>1.后门</h2><ul><li>​        后门程序一般是指那些绕过安全性控制而获取对程序或系统访问权的程序方法。类别：网页、线程插入、扩展、C/S后门。</li></ul><h2 id="2-后门在安全测试中的实际意义"><a href="#2-后门在安全测试中的实际意义" class="headerlink" title="2.后门在安全测试中的实际意义"></a>2.后门在安全测试中的实际意义</h2><ul><li>​        例如后门藏在网页上、软件内，悄无声息的进行攻击者想要的操作。</li></ul><h1 id="五、WEB方向"><a href="#五、WEB方向" class="headerlink" title="五、WEB方向"></a>五、WEB方向</h1><h2 id="1-web的组成架构"><a href="#1-web的组成架构" class="headerlink" title="1.web的组成架构"></a>1.web的组成架构</h2><ul><li>网站源码：分脚本类型、分应用方向</li><li>操作系统：windows、linux</li><li>中间件（搭建平台）：apache、iis、tomcat、nginx等</li><li>数据库：access、mysql、mssql、oracle、sybase、db2、postsql等</li></ul><h2 id="2-web相关安全漏洞"><a href="#2-web相关安全漏洞" class="headerlink" title="2.web相关安全漏洞"></a>2.web相关安全漏洞</h2><ul><li><p>web源码对应漏洞：</p><p>–SQL注入</p><p>–文件上传</p><p>–XSS</p><p>–代码执行</p><p>–变量覆盖</p><p>–逻辑漏洞</p><p>–反序列化</p></li><li><p>2）web中间件对应漏洞：</p><p>–未授权访问</p></li><li><p>3）web数据库对应漏洞：</p><p>–内核漏洞</p></li><li><p>4）web系统层对应漏洞：</p><p>–提权漏洞</p><p>–安全代码执行</p></li></ul><h2 id="3-相关资源"><a href="#3-相关资源" class="headerlink" title="3.相关资源"></a>3.相关资源</h2><ul><li>web安全相关地址：<a href="https://websec.readthedocs.io/zh/latest/">https://websec.readthedocs.io/zh/latest/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
